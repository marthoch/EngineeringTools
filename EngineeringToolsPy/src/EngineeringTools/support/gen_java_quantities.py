#!/usr/bin/env python
# -*- coding: utf-8 -*-
# pylint: disable-msg=W0613,W0212,W0223,C0302
from __future__ import with_statement
"""generate quantities in java, code generator

content:
========
    generate quantities in java, code generator

@summary: generate quantities in java, code generator


"""

__author__  = 'Martin Hochwallner <marthoch@users.noreply.github.com>'
__email__   = "marthoch@users.noreply.github.com"
__license__ = "BSD 3-clause"

# $Source$


import os
import sys
import inspect

from .. import quantities as Q


def generate(path):          
    for member in inspect.getmembers(Q):
        cls = member[1]
        if (inspect.isclass(cls) 
            and (not issubclass(cls, Exception)) 
            and (not cls.__name__.startswith('Quantity'))
            and (cls.__name__ != 'Boolean')
            and (cls.__name__ != 'TemperatureAbsolute')
            and (cls.__name__ != 'Number')
            and (cls.__name__ != 'String')
            and (cls.__name__ != 'Text')
            and (cls.__name__ != 'PathStr')): 
            

            filename = os.path.join(path, '%s.java' % cls.__name__)
            print('%s' % filename)
            code = gen_java_class(cls) 
            with open(filename, 'w') as f:
                f.write('\n'.join(code))
            print('%s done' % filename)
            
def gen_java_class(cls):    
    code = []
    code.append('package paradinf.quantities;')
    code.append('')
    code.append('// do not edit: automated generated by paradinf.quantities.gen_java_quantities')
    code.append('')
    
    baseclass = cls.__base__.__name__
    if baseclass == 'QuantityDecimal':
        baseclass = 'QuantityFloat'
    code.append('public class %s extends %s {' % (cls.__name__, baseclass))
    code.append('    private static java.util.HashMap<String, Double> my_units;')
    code.append('    private static String my_iso_unit;')
    code.append('')
    code.append('    static {')
    code.append('        my_iso_unit = "%s";' % cls._isoUnit )
    code.append('        my_units = new java.util.HashMap<String, Double>();')
    code.append('        my_units.put(my_iso_unit, 1.0);')
    for key, val in cls._units.items():
        print(key)
        print(val)
        if val is not None:
            if isinstance(key, str):
                key = '"%s"' % key
            if isinstance(val, str):
                val = '"%s"' % val
            else:
                val = '%f' % val
            code.append('        my_units.put(%s, %s);' % (key, val))
    code.append('    }')
    code.append('')
    
    code.append('    public %s() throws ParaDInF_quantity_ErrorUnitNotFound {' % cls.__name__)
    code.append('        units = my_units;')
    code.append('        iso_unit = my_iso_unit;')
    code.append('    }')
    code.append('')
    code.append('    public %s(double p_value, String p_unit) throws ParaDInF_quantity_ErrorUnitNotFound {' % cls.__name__)
    code.append('        units = my_units;')
    code.append('        iso_unit = my_iso_unit;')
    code.append('        init(p_value, p_unit);')
    code.append('    }')
    code.append('')
    code.append('    public %s(double p_value) throws ParaDInF_quantity_ErrorUnitNotFound {' % cls.__name__)
    code.append('        units = my_units;')
    code.append('        iso_unit = my_iso_unit;')
    code.append('        init(p_value, iso_unit);')
    code.append('    }')    
    code.append('}')
    code.append('//eof')
    return code
    



################################################################################
################################################################################
if __name__ == '__main__':
#     import paradinf
#     paradinf.loggingconf.loggingconf()

    from EngineeringTools.quantities import gen_java_quantities
    import sys.path

    path = os.path.dirname(filter(lambda x: x.endswith('ParaDInF_Python'), sys.path)[0])  # pylint: disable=E1136
    path = os.path.join(path, 'ParaDInF_Java', 'paradinf', 'quantities')
    print('using path: %s' % path)
    gen_java_quantities.generate(path)

#eof ###########################################################################

